import Head from "next/head";

import { useEffect, useState, useCallback } from "react";

import {
  PushAPI,
  CONSTANTS,
  MessageEvent,
  MessageEventType,
  GroupDTO,
} from "@pushprotocol/restapi";

import { ethers } from "ethers";

const USER_WALLET_KEY = "ud-push-poc-user-wallet-key";

const GROUP_CHAT_ID = process.env.PUBLIC_GROUP_CHAT_ID ?? "";

type Message = {
  from: string;
  message: string;
  timestamp: string;
};

export default function Home() {
  const [isLoading, setIsLoading] = useState<boolean>(true);

  const [user, setUser] = useState<PushAPI | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);

  const [messageInput, setMessageInput] = useState<string>("");
  const [isSending, setIsSending] = useState<boolean>(false);

  useEffect(() => {
    (async () => {
      try {
        if (!GROUP_CHAT_ID) {
          throw new Error("Group chat ID is missing");
        }

        let userPrivateKey = localStorage.getItem(USER_WALLET_KEY) ?? "";

        if (!userPrivateKey) {
          const userWallet = ethers.Wallet.createRandom();
          userPrivateKey = userWallet.privateKey;
          localStorage.setItem(USER_WALLET_KEY, userPrivateKey);
        }

        const _user = await PushAPI.initialize(
          new ethers.Wallet(userPrivateKey),
          {
            env: CONSTANTS.ENV.STAGING,
          }
        );

        const chatHistory = await _user.chat.history(GROUP_CHAT_ID);

        const _userMessages = chatHistory.map((message) => ({
          from: message.fromDID.split(":")[1],
          message: message.messageContent,
          timestamp: message.timestamp.toString(),
        }));

        setMessages(_userMessages.reverse());

        setUser(_user);

        const stream = await _user.initStream([CONSTANTS.STREAM.CHAT], {
          filter: {
            chats: [GROUP_CHAT_ID],
          },
        });

        stream.on(CONSTANTS.STREAM.CHAT, (message: MessageEvent) => {
          if (message.event.split(".")[1] === MessageEventType.Message) {
            setMessages((prevMessages) => [
              ...prevMessages,
              {
                from: message.from.split(":")[1],
                message: message.message.content,
                timestamp: message.timestamp,
              },
            ]);
          }
        });

        stream.connect();
      } catch (error) {
        console.error(error);
      } finally {
        setIsLoading(false);
      }
    })();
  }, []);

  const onSendMessage = useCallback(
    async (e: React.FormEvent) => {
      e.preventDefault();

      try {
        setIsSending(true);

        if (!user) {
          throw new Error("Failed to initialize user");
        }

        if (!messageInput) {
          throw new Error("Message input is empty");
        }

        const groupChatInfo = (await user.chat.group.info(
          GROUP_CHAT_ID
        )) as GroupDTO;
        const groupChatMembers = groupChatInfo.members.map(
          (member) => member.wallet.split(":")[1]
        );

        if (!groupChatMembers.includes(user.account)) {
          const joinResult = await user.chat.group.join(GROUP_CHAT_ID);
          console.log(joinResult);
        }

        await user.chat.send(GROUP_CHAT_ID, {
          content: messageInput,
          type: "Text",
        });
      } catch (error) {
        console.error(error);
      } finally {
        setIsSending(false);
        setMessageInput("");
      }
    },
    [messageInput, user]
  );

  if (isLoading) {
    return (
      <>
        <Head>
          <title>UD Push Protocol Proof-of-Concept</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="chat-interface">
          <h1>Loading...</h1>
        </div>
      </>
    );
  }

  if (!user) {
    return (
      <>
        <Head>
          <title>UD Push Protocol Proof-of-Concept</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="chat-interface">
          <h1>Failed to initialize user</h1>
        </div>
      </>
    );
  }

  return (
    <>
      <Head>
        <title>UD Push Protocol Proof-of-Concept</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="chat-interface">
        <h1>UD Push Protocol Proof-of-Concept</h1>
        <br />
        <hr />
        <br />
        <div className="chat-body">
          <p>Messages:</p>
          {messages.map((message, index) => (
            <div key={index} className="chat-message">
              <span>{new Date(Number(message.timestamp)).toUTCString()}</span>
              <div className="message-text">
                {message.from}: {message.message}
              </div>
            </div>
          ))}
        </div>
        <br />
        <hr />
        <br />
        <div>
          <p>Address: {user.account}</p>
          <form onSubmit={onSendMessage} className="chat-footer">
            <label htmlFor="message-input">Message: </label>
            <input
              type="text"
              id="message-input"
              value={messageInput}
              onChange={(e) => setMessageInput(e.target.value)}
              placeholder="Type your message..."
            />
            <button
              className="send-button"
              disabled={isSending || !messageInput}
            >
              {isSending ? "Sending..." : "Send"}
            </button>
          </form>
        </div>
      </div>
    </>
  );
}
